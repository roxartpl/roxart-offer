'use strict';

var qs = require('qs');

var _config = require('./config');
var oauth1 = require('./flow/oauth1');
var oauth2 = require('./flow/oauth2');

module.exports = function (_ref) {
  var config = _ref.config;

  var config = _config(config);

  var connect = function connect(_ref2) {
    var state = _ref2.state;
    return new Promise(function (resolve) {
      var provider = _config.provider(config, state);
      var response = transport(provider, state);

      if (provider.oauth === 1) {
        oauth1.request(provider).then(function (result) {
          state.request = result.body;
          oauth1.authorize(provider, result.body).then(function (url) {
            return resolve({ url });
          });
        }).catch(function (err) {
          return resolve(response(err));
        });
      } else if (provider.oauth === 2) {
        state.state = provider.state;
        state.nonce = provider.nonce;
        oauth2.authorize(provider).then(function (url) {
          return resolve({ url });
        }).catch(function (err) {
          return resolve(response(err));
        });
      } else {
        resolve(response({ error: 'Grant: missing or misconfigured provider' }));
      }
    });
  };

  var callback = function callback(_ref3) {
    var state = _ref3.state,
        query = _ref3.query;
    return new Promise(function (resolve) {
      var provider = _config.provider(config, state);
      var response = transport(provider, state);

      if (provider.oauth === 1) {
        oauth1.access(provider, state.request, query).then(function (data) {
          return resolve(response(data));
        }).catch(function (err) {
          return resolve(response(err));
        });
      } else if (provider.oauth === 2) {
        oauth2.access(provider, query, state).then(function (data) {
          return resolve(response(data));
        }).catch(function (err) {
          return resolve(response(err));
        });
      } else {
        resolve(response({ error: 'Grant: missing session or misconfigured provider' }));
      }
    });
  };

  return { config, connect, callback };
};

var transport = function transport(provider, state) {
  return function (data) {
    if (!provider.callback) {
      return { error: qs.stringify(data) };
    } else if (!provider.transport || provider.transport === 'querystring') {
      return { url: `${provider.callback}?${qs.stringify(data)}` };
    } else if (provider.transport === 'session') {
      state.response = data;
      return { url: provider.callback };
    }
  };
};